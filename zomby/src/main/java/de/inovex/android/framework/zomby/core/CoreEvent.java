/* Copyright 2013 inovex GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.inovex.android.framework.zomby.core;

import de.inovex.android.framework.zomby.service.WebService;
import de.inovex.android.framework.zomby.util.ZombyException;
import de.inovex.android.framework.zomby.util.ZombyLog;

/**
 * allows you to send fake hardware events to the kernel
 * @author Manuel Schmidt
 *
 */
public class CoreEvent {
	
	private static final String TAG = "Zomby Instrumentation";
	private String telnetCommand = "";
	
	/**
	 * Event types are groupings of codes under a logical input construct.<br>
	 * Each type has a set of applicable codes to be used in generating events.<br> 
	 * See the Codes section for details on valid codes for each type.
	 */
	public enum EventType {
		/** Used as markers to separate events. Events may be separated in time or in space, 
		  * such as with the multitouch protocol. */
		EV_SYN,  
		/** Used to describe state changes of keyboards, buttons, or other key-like devices. */
	    EV_KEY,
	    /** Used to describe relative axis value changes, e.g. moving the mouse 5 units to the left.*/
	    EV_REL,
	    /** Used to describe absolute axis value changes, e.g. describing the
          * coordinates of a touch on a touchscreen. */
	    EV_ABS,
	    /** Used to describe miscellaneous input data that do not fit into other types. */
	    EV_MSC,
	    /** Used to describe binary state input switches. */
	    EV_SW, 
	    /** Used to turn LEDs on devices on and off. */
	    EV_LED,  
	    /** Used to output sound to devices. */
	    EV_SND,
	    /** Used for autorepeating devices. */
	    EV_REP,
	    /** Used to send force feedback commands to an input device. */
	    EV_FF,  
	    /** A special type for power button and switch input. */
	    EV_PWR,  
	    /** Used to receive force feedback device status. */
	    EV_FF_STATUS,
	    EV_MAX;
	}
	
	/** 
	 * Event codes define the precise type of event. 
	 */
	public enum EventCode {
		/* 
		 * EV_SYN event values are undefined. Their usage is defined only by when they are
		 * sent in the evdev event stream. 
		 */
		
		/** Used to synchronize and separate events into packets of input data changes<br>
          * occurring at the same moment in time. For example, motion of a mouse may set<br>
          * the REL_X and REL_Y values for one motion, then emit a SYN_REPORT. The next<br>
          * motion will emit more REL_X and REL_Y values and send another SYN_REPORT. */
		SYN_REPORT,
		/** TBD */
		SYN_CONFIG,
		/** Used to synchronize and separate touch events. See the multi-touch-protocol.txt<br> 
		  * document for more information. */
		SYN_MT_REPORT,
		/** Used to indicate buffer overrun in the evdev client's event queue. Client should<br>
		  * ignore all events up to and including next SYN_REPORT event and query the device<br>
		  * (using EVIOCG* ioctls) to obtain its current state. */
		SYN_DROPPED,
		
		/*
		 * EV_KEY events take the form KEY_<name> or BTN_<name>. For example, KEY_A is used to 
		 * represent the 'A' key on a keyboard. When a key is depressed, an event with the key's
		 * code is emitted with value 1. When the key is released, an event is emitted with value 0.
		 * Some hardware send events when a key is repeated. These events have a value of 2. 
		 * In general, KEY_<name> is used for keyboard keys, and BTN_<name> is used for other 
		 * types of momentary switch events.
		 */
		
		/** These codes denote one, two, three, and four finger interaction on a trackpad or<br>
		  * touchscreen. For example, if the user uses two fingers and moves them on the touchpad in<br> 
		  * an effort to scroll content on screen, BTN_TOOL_DOUBLETAP should be set to value 1 for the<br>
		  * duration of the motion. Note that all BTN_TOOL_<name> codes and the BTN_TOUCH code are<br>
		  * orthogonal in purpose. A trackpad event generated by finger touches should generate events<br>
          * for one code from each group. At most only one of these BTN_TOOL_<name> codes should have a<br>
          * value of 1 during any synchronization frame.*/
		BTN_TOUCH,
		BTN_TOOL_FINGER,
		BTN_TOOL_DOUBLETAP, 
		BTN_TOOL_TRIPLETAP, 
		BTN_TOOL_QUADTAP,
		
		/*
		 * EV_REL events describe relative changes in a property. For example, a mouse may move to the 
		 * left by a certain number of units, but its absolute position in space is unknown. If the 
		 * absolute position is known, EV_ABS codes should be used instead of EV_REL codes.
		 */
		
		/** These code are used for vertical scroll wheels */
		REL_WHEEL, 
		/** These code are used for horizontal scroll wheels */
		REL_HWHEEL,
		
		/*
		 * EV_ABS events describe absolute changes in a property. For example, 
		 * a touchpad may emit coordinates for a touch location.
		 * ABS_MT_<name>: Used to describe multitouch input events.
		 */
		
		/** Used to describe the distance of a tool from an interaction surface.<br>
		  * This event should only be emitted while the tool is hovering, meaning in close<br> 
		  * proximity of the device and while the value of the BTN_TOUCH code is 0.<br>
		  * If the input device may be used freely in three dimensions, consider ABS_Z instead.<br> */
		ABS_DISTANCE,
		  
		/*
		 * EV_SW events describe stateful binary switches. For example, the SW_LID code is 
		 * used to denote when a laptop lid is closed.
		 */
		  
		/*
		 * EV_MSC events are used for input and output events that do not fall under other categories.
		 */
		  
		/** Used to report the number of microseconds since the last reset. This event should<br>
		 * be coded as an uint32 value, which is allowed to wrap around with no special consequence. <br>
		 * It is assumed that the time difference between two consecutive events is reliable on a <br>
		 * reasonable time scale (hours). A reset to zero can happen, in which case the time since <br>
		 * the last event is unknown.  If the device does not provide this information, the driver must<br>
         * not provide it to user space.*/
		MSC_TIMESTAMP;
		
		/*
		 * EV_LED events are used for input and output to set and query the state of various LEDs on devices.
		 */

		/*
		 * EV_REP events are used for specifying autorepeating events.
		 */

		/*
		 * EV_SND events are used for sending sound commands to simple sound output devices.
		 */

		/*
		 * EV_FF events are used to initialize a force feedback capable device and to cause 
		 * such device to feedback.
		 */

		/*
		 * EV_PWR events are a special type of event used specifically for power mangement. 
		 * Its usage is not well defined. To be addressed later.
		 */
	}
	
	/**
	 * allows you to send a series of events to the kernel
	 * @param eventType
	 * @param eventCode
	 * @param value
	 * @throws ZombyException 
	 */
	public void send(EventType eventType, EventCode eventCode, int value) throws ZombyException {
		telnetCommand = "event send " + eventType + ":" + eventCode + ":" + value;			
		ZombyLog.logTelnetCommand(TAG, telnetCommand);
		new WebService().sendTelnetCommand(telnetCommand);
	}
	
	/**
	 * allows you to send a series of events to the kernel
	 * @param eventType
	 * @param eventCode
	 * @param value
	 * @throws ZombyException 
	 */
	public void send(EventType eventType, String eventCode, int value) throws ZombyException {
		telnetCommand = "event send " + eventType + ":" + eventCode + ":" + value;			
		ZombyLog.logTelnetCommand(TAG, telnetCommand);
		new WebService().sendTelnetCommand(telnetCommand);
	}
	
	/**
	 * allows you to simulate keystrokes from a given text
	 * @param message
	 * @throws ZombyException 
	 */
	@Deprecated
	public void text(String message) throws ZombyException {
		telnetCommand = "event message " + message;		
		ZombyLog.logTelnetCommand(TAG, telnetCommand);
		new WebService().sendTelnetCommand(telnetCommand);
	}
}
